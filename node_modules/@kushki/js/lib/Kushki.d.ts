/* tslint:disable:all */
import "reflect-metadata";
import { BankListResponse } from "./../lib/types/bank_list_response";
import { BinBody } from "./../lib/types/bin_body";
import { BinInfoResponse } from "./../lib/types/bin_info_response";
import { CardAsyncTokenRequest } from "./../lib/types/card_async_token_request";
import { CardAsyncTokenResponse } from "./../lib/types/card_async_token_response";
import { CashTokenRequest } from "./../lib/types/cash_token_request";
import { DeletePaymentMethodRequest } from "./../lib/types/delete_payment_method_request";
import { ErrorResponse } from "./../lib/types/error_response";
import { InitAuthRequest } from "./../lib/types/init_auth_request";
import { InitAuthResponse } from "./../lib/types/init_auth_response";
import { MobileProcessorToken } from "./../lib/types/mobile_processor_token";
import { MobileProcessorTokenRequest } from "./../lib/types/mobile_processor_token_request";
import { MultiMerchantInfoRequest } from "./../lib/types/multimerchant_info_request";
import { MultiMerchantInfoResponse } from "./../lib/types/multimerchant_info_response";
import { PaymentDataResponse } from "./../lib/types/payment_data_response";
import { PayoutsCashTokenRequest } from "./../lib/types/payouts_cash_request";
import { PayoutsTransferTokenRequest } from "./../lib/types/payouts_transfer_token_request";
import { CommissionConfigurationAmount } from "./../lib/types/remote/commission_configuration_amount";
import { CommissionConfigurationRequest } from "./../lib/types/remote/commission_configuration_request";
import { IDeferredResponse } from "./../lib/types/remote/deferred_response";
import { TokenResponse } from "./../lib/types/remote/token_response";
import { TransferTokenRequest } from "./../lib/types/remote/transfer_token_request";
import { ResponseStatusValidator } from "./../lib/types/response_status_validator";
import { SavedPaymentMethodRequest } from "./../lib/types/saved_payment_data_request";
import { SecureOtpRequest } from "./../lib/types/secure_otp_request";
import { SecureOtpResponse } from "./../lib/types/secure_otp_response";
import { SubscriptionCardAsyncTokenRequest } from "./../lib/types/subscription_card_async_token_request";
import { SubscriptionCardAsyncTokenResponse } from "./../lib/types/subscription_card_async_token_response";
import { SubscriptionTokenKPayRequest } from "./../lib/types/subscription_token_kpay_request";
import { SubscriptionTokenRequest } from "./../lib/types/subscription_token_request";
import { TokenChargeRequest } from "./../lib/types/token_charge_request";
import { TokenKPayRequest } from "./../lib/types/token_kpay_request";
import { TokenRequest } from "./../lib/types/token_request";
import { TransferSubscriptionTokenRequest } from "./../lib/types/transfer_subscription_token_request";
import { VerifyAuthRequest } from "./../lib/types/verify_auth_request";
import { VerifyAuthResponse } from "./../lib/types/verify_auth_response";
/**
 * Implementation
 */
export declare class Kushki {
    private readonly _merchantId;
    private readonly _inTestEnvironment;
    private readonly _cardService;
    private readonly _multiMerchantInfoService;
    private readonly _commissionService;
    private readonly _cashService;
    private readonly _transferService;
    private readonly _kushkiService;
    private readonly _regional;
    private readonly _secureService;
    private readonly _cardAsyncService;
    private readonly _payoutsCashService;
    private readonly _transferSubscriptionService;
    private readonly _payoutsTransferService;
    private readonly _mobileProcessorService;
    private readonly _kPayService;
    private readonly _authService;
    constructor(body: {
        merchantId: string;
        inTestEnvironment?: boolean;
        regional?: boolean;
    });
    requestToken(body: TokenRequest | TokenKPayRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestTokenCharge(body: TokenChargeRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestSubscriptionToken(body: SubscriptionTokenRequest | SubscriptionTokenKPayRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestTransferToken(body: TransferTokenRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    checkStatus(callback: (value: ResponseStatusValidator | ErrorResponse) => void): void;
    /**
     * @deprecated since version 1.19.8 use requestBankList instead
     * @param {Function} callback with value
     * @returns {void}
     */
    requestPseBankList(callback: (value: BankListResponse | ErrorResponse) => void): void;
    requestBankList(callback: (value: BankListResponse | ErrorResponse) => void): void;
    requestDeferred(body: BinBody, callback: (value: IDeferredResponse[] | ErrorResponse) => void): void;
    requestBinInfo(body: BinBody, callback: (value: BinInfoResponse | ErrorResponse) => void): void;
    requestBrandsByMerchant(callback: (value: string[] | ErrorResponse) => void): void;
    requestCashToken(body: CashTokenRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestSecureServiceValidation(body: SecureOtpRequest, callback: (value: SecureOtpResponse | ErrorResponse) => void): void;
    requestCardAsyncToken(body: CardAsyncTokenRequest, callback: (value: CardAsyncTokenResponse | ErrorResponse) => void): void;
    requestSubscriptionCardAsyncToken(body: SubscriptionCardAsyncTokenRequest, callback: (value: SubscriptionCardAsyncTokenResponse | ErrorResponse) => void): void;
    multiMerchantInfo(body: MultiMerchantInfoRequest, callback: (value: MultiMerchantInfoResponse | ErrorResponse) => void): void;
    requestPayoutsCashToken(body: PayoutsCashTokenRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestPayoutsTransferToken(body: PayoutsTransferTokenRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    getCommissionConfiguration(body: CommissionConfigurationRequest, callback: (value: CommissionConfigurationAmount | ErrorResponse) => void): void;
    requestTransferSubscriptionToken(body: TransferSubscriptionTokenRequest, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestTransferSubscriptionBankList(callback: (value: BankListResponse | ErrorResponse) => void): void;
    requestPayoutsTransferBankList(callback: (value: BankListResponse | ErrorResponse) => void): void;
    requestMobileProcessorToken(body: MobileProcessorTokenRequest, callback: (value: MobileProcessorToken | ErrorResponse) => void): void;
    requestInitAuth(body: InitAuthRequest, callback: (value: InitAuthResponse | ErrorResponse) => void): void;
    deletePaymentMethod(body: DeletePaymentMethodRequest, callback: (value: boolean | ErrorResponse) => void): void;
    requestSavedPaymentMethods(body: SavedPaymentMethodRequest, callback: (value: PaymentDataResponse[] | ErrorResponse) => void): void;
    requestVerifyAuth(body: VerifyAuthRequest, callback: (value: VerifyAuthResponse | ErrorResponse) => void): void;
    private static _callbackError;
    private _requestBankList;
    private _resolve;
}
